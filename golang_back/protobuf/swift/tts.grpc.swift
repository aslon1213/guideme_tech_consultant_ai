//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: tts.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Tts_TextToSpeechClient`, then call methods of this protocol to make API calls.
internal protocol Tts_TextToSpeechClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol? { get }

  func synthesize(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tts_SynthesizeRequest, Tts_SynthesizeResponse>

  func synthesizeStream(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Tts_SynthesizeResponse) -> Void
  ) -> ServerStreamingCall<Tts_SynthesizeRequest, Tts_SynthesizeResponse>
}

extension Tts_TextToSpeechClientProtocol {
  internal var serviceName: String {
    return "tts.TextToSpeech"
  }

  /// Unary call to Synthesize
  ///
  /// - Parameters:
  ///   - request: Request to send to Synthesize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func synthesize(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tts_SynthesizeRequest, Tts_SynthesizeResponse> {
    return self.makeUnaryCall(
      path: Tts_TextToSpeechClientMetadata.Methods.synthesize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeInterceptors() ?? []
    )
  }

  /// Server streaming call to SynthesizeStream
  ///
  /// - Parameters:
  ///   - request: Request to send to SynthesizeStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func synthesizeStream(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Tts_SynthesizeResponse) -> Void
  ) -> ServerStreamingCall<Tts_SynthesizeRequest, Tts_SynthesizeResponse> {
    return self.makeServerStreamingCall(
      path: Tts_TextToSpeechClientMetadata.Methods.synthesizeStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Tts_TextToSpeechClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Tts_TextToSpeechNIOClient")
internal final class Tts_TextToSpeechClient: Tts_TextToSpeechClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the tts.TextToSpeech service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Tts_TextToSpeechNIOClient: Tts_TextToSpeechClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol?

  /// Creates a client for the tts.TextToSpeech service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Tts_TextToSpeechAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol? { get }

  func makeSynthesizeCall(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Tts_SynthesizeRequest, Tts_SynthesizeResponse>

  func makeSynthesizeStreamCall(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Tts_SynthesizeRequest, Tts_SynthesizeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Tts_TextToSpeechAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Tts_TextToSpeechClientMetadata.serviceDescriptor
  }

  internal var interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSynthesizeCall(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Tts_SynthesizeRequest, Tts_SynthesizeResponse> {
    return self.makeAsyncUnaryCall(
      path: Tts_TextToSpeechClientMetadata.Methods.synthesize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeInterceptors() ?? []
    )
  }

  internal func makeSynthesizeStreamCall(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Tts_SynthesizeRequest, Tts_SynthesizeResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Tts_TextToSpeechClientMetadata.Methods.synthesizeStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Tts_TextToSpeechAsyncClientProtocol {
  internal func synthesize(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Tts_SynthesizeResponse {
    return try await self.performAsyncUnaryCall(
      path: Tts_TextToSpeechClientMetadata.Methods.synthesize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeInterceptors() ?? []
    )
  }

  internal func synthesizeStream(
    _ request: Tts_SynthesizeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Tts_SynthesizeResponse> {
    return self.performAsyncServerStreamingCall(
      path: Tts_TextToSpeechClientMetadata.Methods.synthesizeStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Tts_TextToSpeechAsyncClient: Tts_TextToSpeechAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tts_TextToSpeechClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Tts_TextToSpeechClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'synthesize'.
  func makeSynthesizeInterceptors() -> [ClientInterceptor<Tts_SynthesizeRequest, Tts_SynthesizeResponse>]

  /// - Returns: Interceptors to use when invoking 'synthesizeStream'.
  func makeSynthesizeStreamInterceptors() -> [ClientInterceptor<Tts_SynthesizeRequest, Tts_SynthesizeResponse>]
}

internal enum Tts_TextToSpeechClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TextToSpeech",
    fullName: "tts.TextToSpeech",
    methods: [
      Tts_TextToSpeechClientMetadata.Methods.synthesize,
      Tts_TextToSpeechClientMetadata.Methods.synthesizeStream,
    ]
  )

  internal enum Methods {
    internal static let synthesize = GRPCMethodDescriptor(
      name: "Synthesize",
      path: "/tts.TextToSpeech/Synthesize",
      type: GRPCCallType.unary
    )

    internal static let synthesizeStream = GRPCMethodDescriptor(
      name: "SynthesizeStream",
      path: "/tts.TextToSpeech/SynthesizeStream",
      type: GRPCCallType.serverStreaming
    )
  }
}


//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: classifier.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Toclassifier_ToClassifierClient`, then call methods of this protocol to make API calls.
internal protocol Toclassifier_ToClassifierClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol? { get }

  func trainOnSavedDocuments(
    _ request: Toclassifier_Username,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Username, Toclassifier_TrainResponse>

  func trainActions(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Toclassifier_ActionFull, Toclassifier_TrainResponse>

  func trainonSavedDocumentsJson(
    _ request: Toclassifier_JsonData,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_JsonData, Toclassifier_TrainResponse>

  func queryActions(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_ActionFull>

  func giveAudioAnswerForQuery(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer>

  func giveAudioAnswerOrJustTextAnswer(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_AudoWithText>

  func saveDocuments(
    _ request: Toclassifier_Document,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Document, Toclassifier_GeneralAnswer>

  func deleteDocument(
    _ request: Toclassifier_Document,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Document, Toclassifier_GeneralAnswer>

  func getGreetingMessage(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer>

  func classifyAndAnswer(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer>

  func openChat(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_ChatID>

  func closeChat(
    _ request: Toclassifier_ChatID,
    callOptions: CallOptions?
  ) -> UnaryCall<Toclassifier_ChatID, Toclassifier_GeneralAnswer>
}

extension Toclassifier_ToClassifierClientProtocol {
  internal var serviceName: String {
    return "toclassifier.ToClassifier"
  }

  /// Unary call to TrainOnSavedDocuments
  ///
  /// - Parameters:
  ///   - request: Request to send to TrainOnSavedDocuments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func trainOnSavedDocuments(
    _ request: Toclassifier_Username,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Username, Toclassifier_TrainResponse> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainOnSavedDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainOnSavedDocumentsInterceptors() ?? []
    )
  }

  /// Client streaming call to TrainActions
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func trainActions(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Toclassifier_ActionFull, Toclassifier_TrainResponse> {
    return self.makeClientStreamingCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainActions.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainActionsInterceptors() ?? []
    )
  }

  /// Unary call to TrainonSavedDocumentsJson
  ///
  /// - Parameters:
  ///   - request: Request to send to TrainonSavedDocumentsJson.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func trainonSavedDocumentsJson(
    _ request: Toclassifier_JsonData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_JsonData, Toclassifier_TrainResponse> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainonSavedDocumentsJson.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainonSavedDocumentsJsonInterceptors() ?? []
    )
  }

  /// Unary call to QueryActions
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryActions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryActions(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_ActionFull> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.queryActions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActionsInterceptors() ?? []
    )
  }

  /// Unary call to GiveAudioAnswerForQuery
  ///
  /// - Parameters:
  ///   - request: Request to send to GiveAudioAnswerForQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func giveAudioAnswerForQuery(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.giveAudioAnswerForQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGiveAudioAnswerForQueryInterceptors() ?? []
    )
  }

  /// Unary call to GiveAudioAnswerOrJustTextAnswer
  ///
  /// - Parameters:
  ///   - request: Request to send to GiveAudioAnswerOrJustTextAnswer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func giveAudioAnswerOrJustTextAnswer(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_AudoWithText> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.giveAudioAnswerOrJustTextAnswer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGiveAudioAnswerOrJustTextAnswerInterceptors() ?? []
    )
  }

  /// Unary call to SaveDocuments
  ///
  /// - Parameters:
  ///   - request: Request to send to SaveDocuments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func saveDocuments(
    _ request: Toclassifier_Document,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Document, Toclassifier_GeneralAnswer> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.saveDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveDocumentsInterceptors() ?? []
    )
  }

  /// Unary call to DeleteDocument
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteDocument(
    _ request: Toclassifier_Document,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Document, Toclassifier_GeneralAnswer> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.deleteDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDocumentInterceptors() ?? []
    )
  }

  /// Unary call to GetGreetingMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGreetingMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGreetingMessage(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.getGreetingMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGreetingMessageInterceptors() ?? []
    )
  }

  /// to classifier service
  ///
  /// - Parameters:
  ///   - request: Request to send to ClassifyAndAnswer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classifyAndAnswer(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.classifyAndAnswer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassifyAndAnswerInterceptors() ?? []
    )
  }

  /// Unary call to OpenChat
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenChat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func openChat(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_Query, Toclassifier_ChatID> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.openChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenChatInterceptors() ?? []
    )
  }

  /// Unary call to CloseChat
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseChat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeChat(
    _ request: Toclassifier_ChatID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Toclassifier_ChatID, Toclassifier_GeneralAnswer> {
    return self.makeUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.closeChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseChatInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Toclassifier_ToClassifierClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Toclassifier_ToClassifierNIOClient")
internal final class Toclassifier_ToClassifierClient: Toclassifier_ToClassifierClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the toclassifier.ToClassifier service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Toclassifier_ToClassifierNIOClient: Toclassifier_ToClassifierClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol?

  /// Creates a client for the toclassifier.ToClassifier service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Toclassifier_ToClassifierAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol? { get }

  func makeTrainOnSavedDocumentsCall(
    _ request: Toclassifier_Username,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Username, Toclassifier_TrainResponse>

  func makeTrainActionsCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Toclassifier_ActionFull, Toclassifier_TrainResponse>

  func makeTrainonSavedDocumentsJsonCall(
    _ request: Toclassifier_JsonData,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_JsonData, Toclassifier_TrainResponse>

  func makeQueryActionsCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_ActionFull>

  func makeGiveAudioAnswerForQueryCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer>

  func makeGiveAudioAnswerOrJustTextAnswerCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_AudoWithText>

  func makeSaveDocumentsCall(
    _ request: Toclassifier_Document,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Document, Toclassifier_GeneralAnswer>

  func makeDeleteDocumentCall(
    _ request: Toclassifier_Document,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Document, Toclassifier_GeneralAnswer>

  func makeGetGreetingMessageCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer>

  func makeClassifyAndAnswerCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer>

  func makeOpenChatCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_ChatID>

  func makeCloseChatCall(
    _ request: Toclassifier_ChatID,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Toclassifier_ChatID, Toclassifier_GeneralAnswer>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Toclassifier_ToClassifierAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Toclassifier_ToClassifierClientMetadata.serviceDescriptor
  }

  internal var interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeTrainOnSavedDocumentsCall(
    _ request: Toclassifier_Username,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Username, Toclassifier_TrainResponse> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainOnSavedDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainOnSavedDocumentsInterceptors() ?? []
    )
  }

  internal func makeTrainActionsCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Toclassifier_ActionFull, Toclassifier_TrainResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainActions.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainActionsInterceptors() ?? []
    )
  }

  internal func makeTrainonSavedDocumentsJsonCall(
    _ request: Toclassifier_JsonData,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_JsonData, Toclassifier_TrainResponse> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainonSavedDocumentsJson.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainonSavedDocumentsJsonInterceptors() ?? []
    )
  }

  internal func makeQueryActionsCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_ActionFull> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.queryActions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActionsInterceptors() ?? []
    )
  }

  internal func makeGiveAudioAnswerForQueryCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.giveAudioAnswerForQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGiveAudioAnswerForQueryInterceptors() ?? []
    )
  }

  internal func makeGiveAudioAnswerOrJustTextAnswerCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_AudoWithText> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.giveAudioAnswerOrJustTextAnswer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGiveAudioAnswerOrJustTextAnswerInterceptors() ?? []
    )
  }

  internal func makeSaveDocumentsCall(
    _ request: Toclassifier_Document,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Document, Toclassifier_GeneralAnswer> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.saveDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveDocumentsInterceptors() ?? []
    )
  }

  internal func makeDeleteDocumentCall(
    _ request: Toclassifier_Document,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Document, Toclassifier_GeneralAnswer> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.deleteDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDocumentInterceptors() ?? []
    )
  }

  internal func makeGetGreetingMessageCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.getGreetingMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGreetingMessageInterceptors() ?? []
    )
  }

  internal func makeClassifyAndAnswerCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_GeneralAnswer> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.classifyAndAnswer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassifyAndAnswerInterceptors() ?? []
    )
  }

  internal func makeOpenChatCall(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_Query, Toclassifier_ChatID> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.openChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenChatInterceptors() ?? []
    )
  }

  internal func makeCloseChatCall(
    _ request: Toclassifier_ChatID,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Toclassifier_ChatID, Toclassifier_GeneralAnswer> {
    return self.makeAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.closeChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseChatInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Toclassifier_ToClassifierAsyncClientProtocol {
  internal func trainOnSavedDocuments(
    _ request: Toclassifier_Username,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_TrainResponse {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainOnSavedDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainOnSavedDocumentsInterceptors() ?? []
    )
  }

  internal func trainActions<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_TrainResponse where RequestStream: Sequence, RequestStream.Element == Toclassifier_ActionFull {
    return try await self.performAsyncClientStreamingCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainActions.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainActionsInterceptors() ?? []
    )
  }

  internal func trainActions<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_TrainResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Toclassifier_ActionFull {
    return try await self.performAsyncClientStreamingCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainActions.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainActionsInterceptors() ?? []
    )
  }

  internal func trainonSavedDocumentsJson(
    _ request: Toclassifier_JsonData,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_TrainResponse {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.trainonSavedDocumentsJson.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTrainonSavedDocumentsJsonInterceptors() ?? []
    )
  }

  internal func queryActions(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_ActionFull {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.queryActions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActionsInterceptors() ?? []
    )
  }

  internal func giveAudioAnswerForQuery(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_GeneralAnswer {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.giveAudioAnswerForQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGiveAudioAnswerForQueryInterceptors() ?? []
    )
  }

  internal func giveAudioAnswerOrJustTextAnswer(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_AudoWithText {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.giveAudioAnswerOrJustTextAnswer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGiveAudioAnswerOrJustTextAnswerInterceptors() ?? []
    )
  }

  internal func saveDocuments(
    _ request: Toclassifier_Document,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_GeneralAnswer {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.saveDocuments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveDocumentsInterceptors() ?? []
    )
  }

  internal func deleteDocument(
    _ request: Toclassifier_Document,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_GeneralAnswer {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.deleteDocument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDocumentInterceptors() ?? []
    )
  }

  internal func getGreetingMessage(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_GeneralAnswer {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.getGreetingMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGreetingMessageInterceptors() ?? []
    )
  }

  internal func classifyAndAnswer(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_GeneralAnswer {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.classifyAndAnswer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassifyAndAnswerInterceptors() ?? []
    )
  }

  internal func openChat(
    _ request: Toclassifier_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_ChatID {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.openChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenChatInterceptors() ?? []
    )
  }

  internal func closeChat(
    _ request: Toclassifier_ChatID,
    callOptions: CallOptions? = nil
  ) async throws -> Toclassifier_GeneralAnswer {
    return try await self.performAsyncUnaryCall(
      path: Toclassifier_ToClassifierClientMetadata.Methods.closeChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseChatInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Toclassifier_ToClassifierAsyncClient: Toclassifier_ToClassifierAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Toclassifier_ToClassifierClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Toclassifier_ToClassifierClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'trainOnSavedDocuments'.
  func makeTrainOnSavedDocumentsInterceptors() -> [ClientInterceptor<Toclassifier_Username, Toclassifier_TrainResponse>]

  /// - Returns: Interceptors to use when invoking 'trainActions'.
  func makeTrainActionsInterceptors() -> [ClientInterceptor<Toclassifier_ActionFull, Toclassifier_TrainResponse>]

  /// - Returns: Interceptors to use when invoking 'trainonSavedDocumentsJson'.
  func makeTrainonSavedDocumentsJsonInterceptors() -> [ClientInterceptor<Toclassifier_JsonData, Toclassifier_TrainResponse>]

  /// - Returns: Interceptors to use when invoking 'queryActions'.
  func makeQueryActionsInterceptors() -> [ClientInterceptor<Toclassifier_Query, Toclassifier_ActionFull>]

  /// - Returns: Interceptors to use when invoking 'giveAudioAnswerForQuery'.
  func makeGiveAudioAnswerForQueryInterceptors() -> [ClientInterceptor<Toclassifier_Query, Toclassifier_GeneralAnswer>]

  /// - Returns: Interceptors to use when invoking 'giveAudioAnswerOrJustTextAnswer'.
  func makeGiveAudioAnswerOrJustTextAnswerInterceptors() -> [ClientInterceptor<Toclassifier_Query, Toclassifier_AudoWithText>]

  /// - Returns: Interceptors to use when invoking 'saveDocuments'.
  func makeSaveDocumentsInterceptors() -> [ClientInterceptor<Toclassifier_Document, Toclassifier_GeneralAnswer>]

  /// - Returns: Interceptors to use when invoking 'deleteDocument'.
  func makeDeleteDocumentInterceptors() -> [ClientInterceptor<Toclassifier_Document, Toclassifier_GeneralAnswer>]

  /// - Returns: Interceptors to use when invoking 'getGreetingMessage'.
  func makeGetGreetingMessageInterceptors() -> [ClientInterceptor<Toclassifier_Query, Toclassifier_GeneralAnswer>]

  /// - Returns: Interceptors to use when invoking 'classifyAndAnswer'.
  func makeClassifyAndAnswerInterceptors() -> [ClientInterceptor<Toclassifier_Query, Toclassifier_GeneralAnswer>]

  /// - Returns: Interceptors to use when invoking 'openChat'.
  func makeOpenChatInterceptors() -> [ClientInterceptor<Toclassifier_Query, Toclassifier_ChatID>]

  /// - Returns: Interceptors to use when invoking 'closeChat'.
  func makeCloseChatInterceptors() -> [ClientInterceptor<Toclassifier_ChatID, Toclassifier_GeneralAnswer>]
}

internal enum Toclassifier_ToClassifierClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ToClassifier",
    fullName: "toclassifier.ToClassifier",
    methods: [
      Toclassifier_ToClassifierClientMetadata.Methods.trainOnSavedDocuments,
      Toclassifier_ToClassifierClientMetadata.Methods.trainActions,
      Toclassifier_ToClassifierClientMetadata.Methods.trainonSavedDocumentsJson,
      Toclassifier_ToClassifierClientMetadata.Methods.queryActions,
      Toclassifier_ToClassifierClientMetadata.Methods.giveAudioAnswerForQuery,
      Toclassifier_ToClassifierClientMetadata.Methods.giveAudioAnswerOrJustTextAnswer,
      Toclassifier_ToClassifierClientMetadata.Methods.saveDocuments,
      Toclassifier_ToClassifierClientMetadata.Methods.deleteDocument,
      Toclassifier_ToClassifierClientMetadata.Methods.getGreetingMessage,
      Toclassifier_ToClassifierClientMetadata.Methods.classifyAndAnswer,
      Toclassifier_ToClassifierClientMetadata.Methods.openChat,
      Toclassifier_ToClassifierClientMetadata.Methods.closeChat,
    ]
  )

  internal enum Methods {
    internal static let trainOnSavedDocuments = GRPCMethodDescriptor(
      name: "TrainOnSavedDocuments",
      path: "/toclassifier.ToClassifier/TrainOnSavedDocuments",
      type: GRPCCallType.unary
    )

    internal static let trainActions = GRPCMethodDescriptor(
      name: "TrainActions",
      path: "/toclassifier.ToClassifier/TrainActions",
      type: GRPCCallType.clientStreaming
    )

    internal static let trainonSavedDocumentsJson = GRPCMethodDescriptor(
      name: "TrainonSavedDocumentsJson",
      path: "/toclassifier.ToClassifier/TrainonSavedDocumentsJson",
      type: GRPCCallType.unary
    )

    internal static let queryActions = GRPCMethodDescriptor(
      name: "QueryActions",
      path: "/toclassifier.ToClassifier/QueryActions",
      type: GRPCCallType.unary
    )

    internal static let giveAudioAnswerForQuery = GRPCMethodDescriptor(
      name: "GiveAudioAnswerForQuery",
      path: "/toclassifier.ToClassifier/GiveAudioAnswerForQuery",
      type: GRPCCallType.unary
    )

    internal static let giveAudioAnswerOrJustTextAnswer = GRPCMethodDescriptor(
      name: "GiveAudioAnswerOrJustTextAnswer",
      path: "/toclassifier.ToClassifier/GiveAudioAnswerOrJustTextAnswer",
      type: GRPCCallType.unary
    )

    internal static let saveDocuments = GRPCMethodDescriptor(
      name: "SaveDocuments",
      path: "/toclassifier.ToClassifier/SaveDocuments",
      type: GRPCCallType.unary
    )

    internal static let deleteDocument = GRPCMethodDescriptor(
      name: "DeleteDocument",
      path: "/toclassifier.ToClassifier/DeleteDocument",
      type: GRPCCallType.unary
    )

    internal static let getGreetingMessage = GRPCMethodDescriptor(
      name: "GetGreetingMessage",
      path: "/toclassifier.ToClassifier/GetGreetingMessage",
      type: GRPCCallType.unary
    )

    internal static let classifyAndAnswer = GRPCMethodDescriptor(
      name: "ClassifyAndAnswer",
      path: "/toclassifier.ToClassifier/ClassifyAndAnswer",
      type: GRPCCallType.unary
    )

    internal static let openChat = GRPCMethodDescriptor(
      name: "OpenChat",
      path: "/toclassifier.ToClassifier/OpenChat",
      type: GRPCCallType.unary
    )

    internal static let closeChat = GRPCMethodDescriptor(
      name: "CloseChat",
      path: "/toclassifier.ToClassifier/CloseChat",
      type: GRPCCallType.unary
    )
  }
}


//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: stt.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Stt_SpeechToTextClient`, then call methods of this protocol to make API calls.
internal protocol Stt_SpeechToTextClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol? { get }

  func transcribe(
    _ request: Stt_TranscribeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stt_TranscribeRequest, Stt_TranscribeResponse>

  func transcribeStream(
    callOptions: CallOptions?,
    handler: @escaping (Stt_TranscribeResponse) -> Void
  ) -> BidirectionalStreamingCall<Stt_TranscribeRequest, Stt_TranscribeResponse>

  func transcribeStreamWithMetadata(
    callOptions: CallOptions?,
    handler: @escaping (Stt_TranscribeResponse) -> Void
  ) -> BidirectionalStreamingCall<Stt_TranscribeRequest, Stt_TranscribeResponse>

  func detectLanguage(
    _ request: Stt_DetectLanguageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stt_DetectLanguageRequest, Stt_DetectLanguageResponse>

  func getSupportedLanguages(
    _ request: Stt_GetSupportedLanguagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stt_GetSupportedLanguagesRequest, Stt_GetSupportedLanguagesResponse>
}

extension Stt_SpeechToTextClientProtocol {
  internal var serviceName: String {
    return "stt.SpeechToText"
  }

  /// Unary call to Transcribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Transcribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transcribe(
    _ request: Stt_TranscribeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stt_TranscribeRequest, Stt_TranscribeResponse> {
    return self.makeUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to TranscribeStream
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func transcribeStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (Stt_TranscribeResponse) -> Void
  ) -> BidirectionalStreamingCall<Stt_TranscribeRequest, Stt_TranscribeResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribeStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeStreamInterceptors() ?? [],
      handler: handler
    )
  }

  /// Bidirectional streaming call to TranscribeStreamWithMetadata
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func transcribeStreamWithMetadata(
    callOptions: CallOptions? = nil,
    handler: @escaping (Stt_TranscribeResponse) -> Void
  ) -> BidirectionalStreamingCall<Stt_TranscribeRequest, Stt_TranscribeResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribeStreamWithMetadata.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeStreamWithMetadataInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to DetectLanguage
  ///
  /// - Parameters:
  ///   - request: Request to send to DetectLanguage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func detectLanguage(
    _ request: Stt_DetectLanguageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stt_DetectLanguageRequest, Stt_DetectLanguageResponse> {
    return self.makeUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.detectLanguage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetectLanguageInterceptors() ?? []
    )
  }

  /// Unary call to GetSupportedLanguages
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSupportedLanguages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSupportedLanguages(
    _ request: Stt_GetSupportedLanguagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stt_GetSupportedLanguagesRequest, Stt_GetSupportedLanguagesResponse> {
    return self.makeUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.getSupportedLanguages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSupportedLanguagesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Stt_SpeechToTextClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Stt_SpeechToTextNIOClient")
internal final class Stt_SpeechToTextClient: Stt_SpeechToTextClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the stt.SpeechToText service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Stt_SpeechToTextNIOClient: Stt_SpeechToTextClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol?

  /// Creates a client for the stt.SpeechToText service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stt_SpeechToTextAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol? { get }

  func makeTranscribeCall(
    _ request: Stt_TranscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stt_TranscribeRequest, Stt_TranscribeResponse>

  func makeTranscribeStreamCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Stt_TranscribeRequest, Stt_TranscribeResponse>

  func makeTranscribeStreamWithMetadataCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Stt_TranscribeRequest, Stt_TranscribeResponse>

  func makeDetectLanguageCall(
    _ request: Stt_DetectLanguageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stt_DetectLanguageRequest, Stt_DetectLanguageResponse>

  func makeGetSupportedLanguagesCall(
    _ request: Stt_GetSupportedLanguagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stt_GetSupportedLanguagesRequest, Stt_GetSupportedLanguagesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stt_SpeechToTextAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stt_SpeechToTextClientMetadata.serviceDescriptor
  }

  internal var interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeTranscribeCall(
    _ request: Stt_TranscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stt_TranscribeRequest, Stt_TranscribeResponse> {
    return self.makeAsyncUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeInterceptors() ?? []
    )
  }

  internal func makeTranscribeStreamCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Stt_TranscribeRequest, Stt_TranscribeResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribeStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeStreamInterceptors() ?? []
    )
  }

  internal func makeTranscribeStreamWithMetadataCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Stt_TranscribeRequest, Stt_TranscribeResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribeStreamWithMetadata.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeStreamWithMetadataInterceptors() ?? []
    )
  }

  internal func makeDetectLanguageCall(
    _ request: Stt_DetectLanguageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stt_DetectLanguageRequest, Stt_DetectLanguageResponse> {
    return self.makeAsyncUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.detectLanguage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetectLanguageInterceptors() ?? []
    )
  }

  internal func makeGetSupportedLanguagesCall(
    _ request: Stt_GetSupportedLanguagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stt_GetSupportedLanguagesRequest, Stt_GetSupportedLanguagesResponse> {
    return self.makeAsyncUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.getSupportedLanguages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSupportedLanguagesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stt_SpeechToTextAsyncClientProtocol {
  internal func transcribe(
    _ request: Stt_TranscribeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stt_TranscribeResponse {
    return try await self.performAsyncUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeInterceptors() ?? []
    )
  }

  internal func transcribeStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Stt_TranscribeResponse> where RequestStream: Sequence, RequestStream.Element == Stt_TranscribeRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribeStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeStreamInterceptors() ?? []
    )
  }

  internal func transcribeStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Stt_TranscribeResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Stt_TranscribeRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribeStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeStreamInterceptors() ?? []
    )
  }

  internal func transcribeStreamWithMetadata<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Stt_TranscribeResponse> where RequestStream: Sequence, RequestStream.Element == Stt_TranscribeRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribeStreamWithMetadata.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeStreamWithMetadataInterceptors() ?? []
    )
  }

  internal func transcribeStreamWithMetadata<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Stt_TranscribeResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Stt_TranscribeRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Stt_SpeechToTextClientMetadata.Methods.transcribeStreamWithMetadata.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTranscribeStreamWithMetadataInterceptors() ?? []
    )
  }

  internal func detectLanguage(
    _ request: Stt_DetectLanguageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stt_DetectLanguageResponse {
    return try await self.performAsyncUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.detectLanguage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetectLanguageInterceptors() ?? []
    )
  }

  internal func getSupportedLanguages(
    _ request: Stt_GetSupportedLanguagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stt_GetSupportedLanguagesResponse {
    return try await self.performAsyncUnaryCall(
      path: Stt_SpeechToTextClientMetadata.Methods.getSupportedLanguages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSupportedLanguagesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Stt_SpeechToTextAsyncClient: Stt_SpeechToTextAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stt_SpeechToTextClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Stt_SpeechToTextClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'transcribe'.
  func makeTranscribeInterceptors() -> [ClientInterceptor<Stt_TranscribeRequest, Stt_TranscribeResponse>]

  /// - Returns: Interceptors to use when invoking 'transcribeStream'.
  func makeTranscribeStreamInterceptors() -> [ClientInterceptor<Stt_TranscribeRequest, Stt_TranscribeResponse>]

  /// - Returns: Interceptors to use when invoking 'transcribeStreamWithMetadata'.
  func makeTranscribeStreamWithMetadataInterceptors() -> [ClientInterceptor<Stt_TranscribeRequest, Stt_TranscribeResponse>]

  /// - Returns: Interceptors to use when invoking 'detectLanguage'.
  func makeDetectLanguageInterceptors() -> [ClientInterceptor<Stt_DetectLanguageRequest, Stt_DetectLanguageResponse>]

  /// - Returns: Interceptors to use when invoking 'getSupportedLanguages'.
  func makeGetSupportedLanguagesInterceptors() -> [ClientInterceptor<Stt_GetSupportedLanguagesRequest, Stt_GetSupportedLanguagesResponse>]
}

internal enum Stt_SpeechToTextClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SpeechToText",
    fullName: "stt.SpeechToText",
    methods: [
      Stt_SpeechToTextClientMetadata.Methods.transcribe,
      Stt_SpeechToTextClientMetadata.Methods.transcribeStream,
      Stt_SpeechToTextClientMetadata.Methods.transcribeStreamWithMetadata,
      Stt_SpeechToTextClientMetadata.Methods.detectLanguage,
      Stt_SpeechToTextClientMetadata.Methods.getSupportedLanguages,
    ]
  )

  internal enum Methods {
    internal static let transcribe = GRPCMethodDescriptor(
      name: "Transcribe",
      path: "/stt.SpeechToText/Transcribe",
      type: GRPCCallType.unary
    )

    internal static let transcribeStream = GRPCMethodDescriptor(
      name: "TranscribeStream",
      path: "/stt.SpeechToText/TranscribeStream",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let transcribeStreamWithMetadata = GRPCMethodDescriptor(
      name: "TranscribeStreamWithMetadata",
      path: "/stt.SpeechToText/TranscribeStreamWithMetadata",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let detectLanguage = GRPCMethodDescriptor(
      name: "DetectLanguage",
      path: "/stt.SpeechToText/DetectLanguage",
      type: GRPCCallType.unary
    )

    internal static let getSupportedLanguages = GRPCMethodDescriptor(
      name: "GetSupportedLanguages",
      path: "/stt.SpeechToText/GetSupportedLanguages",
      type: GRPCCallType.unary
    )
  }
}

